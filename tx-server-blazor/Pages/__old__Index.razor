@page "/"
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigator

<script src="api/TXWebSocket/GetResource?name=tx-document-editor.min.js"></script>

<h1>Process Document Server-Side</h1>

<style>

	#txDocumentEditorContainer {
		width: 1100px;
		height: 600px;
		display: inline-block;
		position: relative;
	}

</style>

<div id="txDocumentEditorContainer" @ref="txDocumentEditorContainer"></div>

<script src="/scripts/textcontrol.js"></script>

<script>

	function addEditorToElement(element) {

		TXTextControl.init({
			containerID: element.containerID,
			webSocketURL: element.webSocketURL
		});
	}

</script>

<br />

<button @onclick="SaveDocument">
	Save and Reload Document (using ServerTextControl)
</button>

<button @onclick="InsertTable">
	Insert Table (client-side)
</button>

@code
{
	private ElementReference txDocumentEditorContainer;

	public class ConnectionDetails
	{
		public string WebSocketURL { get; set; }
		public string ContainerID { get; set; }
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		var baseUri = Navigator.BaseUri.Replace("https://", "wss://").Replace("http://", "ws://");

		if (firstRender)
		{
			ConnectionDetails connectionDetails = new ConnectionDetails()
			{
					WebSocketURL = baseUri + "api/TXWebSocket",
					ContainerID = "txDocumentEditorContainer"
            };

			// get server app base path
			var appBasePath = Navigator.BaseUri;

			await JSRuntime.InvokeVoidAsync("addEditorToElement", connectionDetails);
		}
	}

	private void InsertTable()
	{
		JSRuntime.InvokeVoidAsync("TextControl.insertTable");
	}

	private void SaveDocument()
	{
		// create a .NET object and call the 'saveDocument' JS function
		var dotNetReference = DotNetObjectReference.Create(this);
		JSRuntime.InvokeVoidAsync("TextControl.saveDocument", dotNetReference);
	}

	// this method is called from the JS function 'saveDocument'
	// it receives the document as a Base64 encoded string
	// it loads the document into a ServerTextControl instance
	// and adds additional text to the document
	// it saves the document back and calls the JS function 'loadDocument'
	[JSInvokable("ProcessDocument")]
	public void ProcessDocument(string document)
	{
		byte[] bDocument;

		// create a ServerTextControl instance to load the saved document
		using (TXTextControl.ServerTextControl tx = new TXTextControl.ServerTextControl())
		{
			tx.Create();
			tx.Load(Convert.FromBase64String(document), TXTextControl.BinaryStreamType.InternalUnicodeFormat);

			// add additional text to the document
			tx.Selection.Text = "This document has been modified by .NET\r\n";

			// save back
			tx.Save(out bDocument, TXTextControl.BinaryStreamType.InternalUnicodeFormat);
		}

		// invoke the JS function 'loadDocument' to load back to the modified document
		JSRuntime.InvokeVoidAsync("TextControl.loadDocument", Convert.ToBase64String(bDocument));
	}

}